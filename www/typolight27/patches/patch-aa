$NetBSD: patch-aa,v 1.1 2009/06/22 01:17:06 taca Exp $

Fix Extention Repository access problem from TYPOlight forum's
articles :
	http://www.typolight.org/forum/topic/12088.html
	http://www.typolight.org/board/message/80018.html

--- system/libraries/Request.php.orig	2009-05-08 23:12:15.000000000 +0900
+++ system/libraries/Request.php
@@ -30,7 +30,8 @@
 /**
  * Class Request
  *
- * Provide methods to handle HTTP request.
+ * Provide methods to handle HTTP request. This class uses some functions of
+ * Drupal's HTTP request class that you can find on http://drupal.org.
  * @copyright  Leo Feyer 2005-2009
  * @author     Leo Feyer <leo@typolight.org>
  * @package    Library
@@ -39,27 +40,61 @@ class Request
 {
 
 	/**
-	 * HTTP object
-	 * @var object
+	 * Data to be added to the request
+	 * @var string
 	 */
-	protected $objHttp;
+	protected $strData;
 
+	/**
+	 * Request method (defaults to GET)
+	 * @var string
+	 */
+	protected $strMethod;
 
 	/**
-	 * Instantiate object and load http plugin
-	 * @throws Exception
+	 * Error string
+	 * @var string
 	 */
-	public function __construct()
-	{
-		$strPluginPath = TL_ROOT . '/plugins/http';
+	protected $strError;
 
-		if (!is_dir($strPluginPath))
-		{
-			throw new Exception('Plugin http required');
-		}
+	/**
+	 * Response code
+	 * @var integer
+	 */
+	protected $intCode;
+
+	/**
+	 * Response string
+	 * @var string
+	 */
+	protected $strResponse;
+
+	/**
+	 * Request string
+	 * @var string
+	 */
+	protected $strRequest;
+
+	/**
+	 * Headers array (these headers will be sent)
+	 * @var array
+	 */
+	protected $arrHeaders = array();
+
+	/**
+	 * Response headers array (these headers are returned)
+	 * @var array
+	 */
+	protected $arrResponseHeaders = array();
 
-		include_once($strPluginPath . '/class.http.php');
-		$this->objHttp = new Http();
+
+	/**
+	 * Set default values
+	 */
+	public function __construct()
+	{
+		$this->strData = '';
+		$this->strMethod = 'get';
 	}
 
 
@@ -74,11 +109,11 @@ class Request
 		switch ($strKey)
 		{
 			case 'data':
-				$this->objHttp->setParams($varValue);
+				$this->strData = $varValue;
 				break;
 
 			case 'method':
-				$this->objHttp->setMethod(strtoupper($varValue));
+				$this->strMethod = $varValue;
 				break;
 
 			default:
@@ -98,19 +133,23 @@ class Request
 		switch ($strKey)
 		{
 			case 'error':
-				return $this->objHttp->getError();
+				return $this->strError;
 				break;
 
 			case 'code':
-				return $this->objHttp->getStatus();
+				return $this->intCode;
+				break;
+
+			case 'request':
+				return $this->strRequest;
 				break;
 
 			case 'response':
-				return $this->objHttp->getResult();
+				return $this->strResponse;
 				break;
 
 			case 'headers':
-				return $this->objHttp->getHeaders();
+				return $this->arrResponseHeaders;
 				break;
 
 			default:
@@ -121,12 +160,23 @@ class Request
 
 
 	/**
+	 * Set additional request headers
+	 * @param string
+	 * @param mixed
+	 */
+	public function setHeader($strKey, $varValue)
+	{
+		$this->arrHeaders[$strKey] = $varValue;
+	}
+
+
+	/**
 	 * Return true if there has been an error
 	 * @return boolean
 	 */
 	public function hasError()
 	{
-		return ($this->objHttp->getError() != '');
+		return strlen($this->strError) ? true : false;
 	}
 
 
@@ -140,15 +190,161 @@ class Request
 	{
 		if ($strData)
 		{
-			$this->objHttp->setParams($strData);
+			$this->strData = $strData;
 		}
 
 		if ($strMethod)
 		{
-			$this->objHttp->setMethod(strtoupper($strMethod));
+			$this->strMethod = $strMethod;
 		}
 
-		$this->objHttp->execute($strUrl);
+		$errstr = '';
+		$errno = null;
+		$uri = parse_url($strUrl);
+
+		switch ($uri['scheme'])
+		{
+			case 'http':
+				$port = isset($uri['port']) ? $uri['port'] : 80;
+				$host = $uri['host'] . (($port != 80) ? ':' . $port : '');
+				$fp = @fsockopen($uri['host'], $port, $errno, $errstr, 10);
+				break;
+
+			case 'https':
+				$port = isset($uri['port']) ? $uri['port'] : 443;
+				$host = $uri['host'] . (($port != 443) ? ':' . $port : '');
+				$fp = @fsockopen('ssl://' . $uri['host'], $port, $errno, $errstr, 15);
+				break;
+
+			default:
+				$this->strError = 'Invalid schema ' . $uri['scheme'];
+				return;
+				break;
+		}
+
+		if (!is_resource($fp))
+		{
+			$this->strError = trim($errno .' '. $errstr);
+			return;
+		}
+
+		$path = isset($uri['path']) ? $uri['path'] : '/';
+
+		if (isset($uri['query']))
+		{
+			$path .= '?' . $uri['query'];
+		}
+
+		$default = array
+		(
+			'Host' => 'Host: ' . $host,
+			'User-Agent' => 'User-Agent: TYPOlight (+http://www.typolight.org/)',
+			'Content-Length' => 'Content-Length: '. strlen($this->strData),
+			'Connection' => 'Connection: close'
+		);
+
+		foreach ($this->arrHeaders as $header=>$value)
+		{
+			$default[$header] = $header . ': ' . $value;
+		}
+
+		$request = strtoupper($this->strMethod) .' '. $path ." HTTP/1.1\r\n";
+		$request .= implode("\r\n", $default);
+		$request .= "\r\n\r\n";
+
+		if (strlen($this->strData))
+		{
+			$request .= $this->strData . "\r\n";
+		}
+
+		$this->strRequest = $request;
+
+		fwrite($fp, $request);
+
+		$response = '';
+
+		while (!feof($fp) && ($chunk = fread($fp, 1024)) != false)
+		{
+			$response .= $chunk;
+		}
+
+		fclose($fp);
+
+		list($split, $this->strResponse) = explode("\r\n\r\n", $response, 2);
+		$split = preg_split("/\r\n|\n|\r/", $split);
+
+		$this->arrResponseHeaders = array();
+		list(, $code, $text) = explode(' ', trim(array_shift($split)), 3);
+
+		while (($line = trim(array_shift($split))) != false)
+		{
+			list($header, $value) = explode(':', $line, 2);
+
+			if (isset($this->arrResponseHeaders[$header]) && $header == 'Set-Cookie')
+			{
+				$this->arrResponseHeaders[$header] .= ',' . trim($value);
+			}
+			else
+			{
+				$this->arrResponseHeaders[$header] = trim($value);
+			}
+		}
+
+		$responses = array
+		(
+			100 => 'Continue',
+			101 => 'Switching Protocols',
+			200 => 'OK',
+			201 => 'Created',
+			202 => 'Accepted',
+			203 => 'Non-Authoritative Information',
+			204 => 'No Content',
+			205 => 'Reset Content',
+			206 => 'Partial Content',
+			300 => 'Multiple Choices',
+			301 => 'Moved Permanently',
+			302 => 'Found',
+			303 => 'See Other',
+			304 => 'Not Modified',
+			305 => 'Use Proxy',
+			307 => 'Temporary Redirect',
+			400 => 'Bad Request',
+			401 => 'Unauthorized',
+			402 => 'Payment Required',
+			403 => 'Forbidden',
+			404 => 'Not Found',
+			405 => 'Method Not Allowed',
+			406 => 'Not Acceptable',
+			407 => 'Proxy Authentication Required',
+			408 => 'Request Timeout',
+			409 => 'Conflict',
+			410 => 'Gone',
+			411 => 'Length Required',
+			412 => 'Precondition Failed',
+			413 => 'Request Entity Too Large',
+			414 => 'Request-URI Too Large',
+			415 => 'Unsupported Media Type',
+			416 => 'Requested Range Not Satisfiable',
+			417 => 'Expectation Failed',
+			500 => 'Internal Server Error',
+			501 => 'Not Implemented',
+			502 => 'Bad Gateway',
+			503 => 'Service Unavailable',
+			504 => 'Gateway Timeout',
+			505 => 'HTTP Version Not Supported'
+		);
+
+		if (!isset($responses[$code]))
+		{
+			$code = floor($code / 100) * 100;
+		}
+
+		$this->intCode = $code;
+
+		if (!in_array(intval($code), array(200, 304)))
+		{
+			$this->strError = strlen($text) ? $text : $responses[$code];
+		}
 	}
 }
 
