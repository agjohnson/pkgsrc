$NetBSD: patch-ba,v 1.4 2009/05/09 18:43:41 hira Exp $

--- configure.orig	2009-04-22 23:54:40.000000000 +0900
+++ configure	2009-05-09 12:42:15.000000000 +0900
@@ -4222,11 +4222,11 @@
         test_randr=no
 		_os=OSF1
 		;;
-	netbsd)
+	*netbsd*)
 		test_gtk=yes
 		test_cairo=yes
 		test_kde=yes
-		test_cups=no
+		test_cups=yes
         test_randr=yes
 		test_freetype=yes
 		PTHREAD_CFLAGS="-pthread"
@@ -11414,7 +11414,7 @@
 fi
 
 if test "$SOLAR_JAVA" != ""; then
-        if test "$JDK" == "gcj" -a -z "$JAVA_HOME"; then
+        if test "$JDK" = "gcj" -a -z "$JAVA_HOME"; then
       if test "x$with_jdk_home" = "x" -a "$_gij_longver" -ge "50000"; then
         cat > findhome.java <<_ACEOF
 import java.io.File;
@@ -11515,7 +11515,7 @@
          echo "JAVA_HOME was not explicitly informed with --with-jdk-home. the configure script" >> warn
          echo "attempted to find JAVA_HOME automatically, but apparently it failed" >> warn
          echo "in case JAVA_HOME is incorrectly set, some projects with not be built correctly" >> warn
-#         if test "$JDK" == "gcj"; then
+#         if test "$JDK" = "gcj"; then
 #             echo "e.g. install java-1.4.2-gcj-compat-devel and use --with-jdk-home=/usr/lib/jvm/java-1.4.2-gcj" >> warn
 #         fi
       fi
@@ -14196,7 +14196,7 @@
 if test -n "$with_system_libxslt" -o -n "$with_system_libs" && \
    test "$with_system_libxslt" != "no"; then
     if test -z "$with_system_libxml" -a -z "$with_system_libs" || \
-      test "$with_system_libxml" == "no"; then
+      test "$with_system_libxml" = "no"; then
       # somehow AC_MSG_WARN won't work...
        echo "to prevent incompatibilities between internal libxml2 and libxslt, the office will be build with system-libxml"
        echo "to prevent incompatibilities between internal libxml2 and libxslt, the office will be build with system-libxml" >> warn
@@ -14206,7 +14206,7 @@
 if test -n "$with_system_libxml" -o -n "$with_system_libs" && \
    test "$with_system_libxml" != "no"; then
     if test -z "$with_system_libxslt" -a -z "$with_system_libs" || \
-      test "$with_system_libxslt" == "no"; then
+      test "$with_system_libxslt" = "no"; then
       # somehow AC_MSG_WARN won't work...
        echo "to prevent incompatibilities between internal libxslt and libxml2, the office will be build with system-libxslt"
        echo "to prevent incompatibilities between internal libxslt and libxml2, the office will be build with system-libxslt" >> warn
@@ -14728,13 +14728,14 @@
 
 
    python_include=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('INCLUDEPY');"`
+   python_ldflags=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('LDFLAGS');"`
    python_version=`$PYTHON -c "import distutils.sysconfig; print distutils.sysconfig.get_config_var('VERSION');"`
    PYTHON_CFLAGS="-I$python_include"
 
    if test "$_os" = "Darwin"; then
       PYTHON_LIBS="-framework Python"
    else
-      PYTHON_LIBS="-lpython$python_version"
+      PYTHON_LIBS="-lpython$python_version $python_ldflags"
    fi
 
       save_CPPFLAGS="$CPPFLAGS"
@@ -14991,7 +14992,7 @@
 { echo "$as_me:$LINENO: result: $ac_cv_header_db_h" >&5
 echo "${ECHO_T}$ac_cv_header_db_h" >&6; }
 if test $ac_cv_header_db_h = yes; then
-   DB_INCLUDES=/usr/include
+   DB_INCLUDES=${BLNK_PREFIX_db4}/include/db4
 else
 
              CFLAGS=-I/usr/include/db4
@@ -15122,13 +15123,13 @@
     #AC_CHECK_LIB(db, db_create, [],
     #  [AC_MSG_ERROR([db library not installed or functional])], [])
 
-{ echo "$as_me:$LINENO: checking for main in -ldb" >&5
-echo $ECHO_N "checking for main in -ldb... $ECHO_C" >&6; }
+{ echo "$as_me:$LINENO: checking for main in -ldb4" >&5
+echo $ECHO_N "checking for main in -ldb4... $ECHO_C" >&6; }
 if test "${ac_cv_lib_db_main+set}" = set; then
   echo $ECHO_N "(cached) $ECHO_C" >&6
 else
   ac_check_lib_save_LIBS=$LIBS
-LIBS="-ldb  $LIBS"
+LIBS="-ldb4  $LIBS"
 cat >conftest.$ac_ext <<_ACEOF
 /* confdefs.h.  */
 _ACEOF
@@ -15182,7 +15183,7 @@
 #define HAVE_LIBDB 1
 _ACEOF
 
-  LIBS="-ldb $LIBS"
+  LIBS="-ldb4 $LIBS"
 
 else
   { { echo "$as_me:$LINENO: error: db not installed or functional" >&5
@@ -16734,6 +16735,8 @@
       MOZ_FLAVOUR=seamonkey
     elif test -n "$with_system_mozilla" && test "$with_system_mozilla" = "firefox"; then
       MOZ_FLAVOUR=firefox
+    elif test -n "$with_system_mozilla" && test "$with_system_mozilla" = "firefox3"; then
+      MOZ_FLAVOUR=firefox3
     elif test -n "$with_system_mozilla" && test "$with_system_mozilla" = "mozilla"; then
       MOZ_FLAVOUR=mozilla
     else
@@ -17470,7 +17473,7 @@
 
     #e.g. http://fedoraproject.org/wiki/Releases/FeatureXULRunnerAPIChanges
     #the plugin pkg-config etc. reverts to "mozilla-plugin" with libxul
-    if test "$MOZ_FLAVOUR" == "libxul"; then
+    if test "$MOZ_FLAVOUR" = "libxul"; then
         MOZ_FLAVOUR="mozilla"
     fi
 
@@ -21353,7 +21356,7 @@
     NEON_CFLAGS=
     BUILD_TYPE="$BUILD_TYPE NEON"
 fi
-if test "$_os" = "Darwin" && test "$with_system_openssl" != "no"; then
+if test "$USE_BUILTIN_openssl" = "yes" && test "$_os" = "Darwin" -o "$_os" = "FreeBSD" -o "$_os" = "NetBSD" && test "$with_system_openssl" != "no"; then
    with_system_openssl=yes
 fi
 { echo "$as_me:$LINENO: checking which libssl to use" >&5
@@ -21364,7 +21367,7 @@
 echo "${ECHO_T}external" >&6; }
     # Mac OS builds should get out without extra stuff is the Mac porters'
     # wish. And pkg-config is although Xcode ships a .pc for openssl
-    if test "$_os" = "Darwin"; then
+    if test "$_os" = "Darwin" -o "$_os" = "FreeBSD" -o "$_os" = "NetBSD" ; then
         OPENSSL_CFLAGS=
         OPENSSL_LIBS="-lssl -lcrypto"
     else
@@ -25460,7 +25463,7 @@
 fi
 
 
-if test "$ENABLE_MEDIAWIKI" == "YES"; then
+if test "$ENABLE_MEDIAWIKI" = "YES"; then
   { echo "$as_me:$LINENO: checking which Servlet API Jar to use" >&5
 echo $ECHO_N "checking which Servlet API Jar to use... $ECHO_C" >&6; }
   if test -n "$with_system_servlet_api"; then
@@ -25525,7 +25528,7 @@
   fi
   { echo "$as_me:$LINENO: checking which jfreereport libs to use" >&5
 echo $ECHO_N "checking which jfreereport libs to use... $ECHO_C" >&6; }
-  if test "$with_system_jfreereport" == "yes"; then
+  if test "$with_system_jfreereport" = "yes"; then
    	SYSTEM_JFREEREPORT=YES
   	   { echo "$as_me:$LINENO: result: external" >&5
 echo "${ECHO_T}external" >&6; }
@@ -26733,7 +26736,7 @@
     fi
 
         KDE_CFLAGS="-I$qt_incdir -I$kde_incdir -DQT_CLEAN_NAMESPACE -DQT_THREAD_SUPPORT"
-    KDE_LIBS="-L$kde_libdir -L$qt_libdir -lkdeui -lkdecore -lqt-mt"
+    KDE_LIBS="-L$kde_libdir -Wl,-R$kde_libdir -L$qt_libdir -Wl,-R$qt_libdir -lkdeui -lkdecore -lqt-mt"
 fi
 
 
@@ -27269,7 +27272,7 @@
    XINERAMA_LINK=dynamic
    { echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6; }
-elif test "$_os" = "Linux" -o "$_os" = "FreeBSD"; then
+elif test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "NetBSD"; then
    if test -e "$XLIB/libXinerama.so" -a -e "$XLIB/libXinerama.a"; then
       # we have both versions, let the user decide but use the dynamic one
       # per default
@@ -27754,9 +27757,13 @@
                 if test -f $ANT_HOME/lib/ant/ant.jar; then
                     ANT_LIB="$ANT_HOME/lib/ant"
                 else
+                   if test -f $ANT_HOME/lib/java/ant/ant.jar; then
+                       ANT_LIB="$ANT_HOME/lib/java/ant"
+                   else
                     { { echo "$as_me:$LINENO: error: Ant libraries not found!" >&5
 echo "$as_me: error: Ant libraries not found!" >&2;}
    { (exit 1); exit 1; }; }
+                   fi
                 fi
              fi
           fi
@@ -27964,12 +27971,12 @@
 { echo "$as_me:$LINENO: checking build verbosity" >&5
 echo $ECHO_N "checking build verbosity... $ECHO_C" >&6; }
 if test -n "$enable_verbose"; then
-   if test "$enable_verbose" == "yes"; then
+   if test "$enable_verbose" = "yes"; then
       VERBOSE="TRUE"
       { echo "$as_me:$LINENO: result: high" >&5
 echo "${ECHO_T}high" >&6; }
    fi
-   if test "$enable_verbose" == "no"; then
+   if test "$enable_verbose" = "no"; then
       VERBOSE="FALSE"
       { echo "$as_me:$LINENO: result: low" >&5
 echo "${ECHO_T}low" >&6; }
